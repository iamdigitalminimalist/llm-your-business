services:
  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - llm-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '9997:9997'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=WARN,kafka.coordinator.group.GroupCoordinator=WARN'
    healthcheck:
      test:
        [
          'CMD',
          'kafka-topics',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - llm-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      LOGGING_LEVEL_COM_PROVECTUS_KAFKA_UI: INFO
      LOGGING_LEVEL_ROOT: WARN
    depends_on:
      - kafka
    networks:
      - llm-network

  # MongoDB (for when not using Atlas)
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: llm_business
    volumes:
      - mongodb_data:/data/db
    networks:
      - llm-network
    profiles:
      - local-db # Only start when using local database

  # LLM Service
  llm:
    build:
      context: ./services/llm
      dockerfile: Dockerfile
    container_name: llm
    restart: unless-stopped
    ports:
      - '8000:8000'
    environment:
      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_INPUT_TOPIC=objective.execution.question
      - KAFKA_OUTPUT_TOPIC=objective.execution.answer
      - KAFKA_CONSUMER_GROUP=llm-service-group

      # Database (using Atlas connection from .env)
      - DATABASE_URL=${DATABASE_URL}

      # LLM API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}

      # Service Configuration
      - LOG_LEVEL=INFO
      - MAX_RETRIES=3
      - PROCESSING_TIMEOUT=300
      - ENVIRONMENT=development
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - llm-network
    volumes:
      - ./services/llm:/app
    command: sh -c "sleep 10 && uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload"

  # Client (React/Vite)
  client:
    build:
      context: .
      dockerfile: ./services/client/Dockerfile
    container_name: client
    ports:
      - '3000:3000'
    volumes:
      - ./services/client:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DOCKER=true
    networks:
      - llm-network

  # Client API (Node.js API)
  client-api:
    build:
      context: .
      dockerfile: ./services/client-api/Dockerfile
    container_name: client-api
    ports:
      - '4000:4000'
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PORT=4000
    volumes:
      - ./services/client-api:/app
      - /app/node_modules
    networks:
      - llm-network

volumes:
  mongodb_data:

networks:
  llm-network:
    driver: bridge

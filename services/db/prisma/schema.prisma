generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum PartnerType {
  MARKETING_AGENCY
  CONSULTING_SERVICE
  TECH_COMPANY
  OTHER
}

enum ProductType {
  WEBSITE_BUILDER
  EMAIL_MARKETING
  CRM_SOFTWARE
  ECOMMERCE_PLATFORM
  ANALYTICS_TOOL
  OTHER
}

enum ObjectiveType {
  TOP_5_RECOMMENDATIONS
  TOP_10_RECOMMENDATIONS
  COMPETITOR_ANALYSIS
  PROS_AND_CONS
  MARKET_POSITION
  PRICING_ANALYSIS
}

enum LLMModel {
  GPT_4O
  GPT_4O_MINI
  GPT_3_5_TURBO
}

enum ExecutionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// 1. Partner - Organizations using the platform
model Partner {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String?
  partnerType PartnerType

  website  String?
  country  String  @default("US")
  industry String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   Product[]
  executions Execution[]
  Objective  Objective[]

  @@map("partners")
}

// 2. Product - Products/services owned by partners
model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String?
  productType ProductType

  isActive Boolean @default(true)

  partnerId String  @db.ObjectId
  partner   Partner @relation(fields: [partnerId], references: [id])

  executions  Execution[]
  Objective   Objective?  @relation(fields: [objectiveId], references: [id])
  objectiveId String?     @db.ObjectId

  @@map("products")
}

// 3. Objective - Static objective definitions (seeded data)
model Objective {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type        ObjectiveType @unique
  title       String // "Top 5 Recommendations"
  description String // Comprehensive description for LLM context

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  models              LLMModel[]
  targets             Target[]
  objectiveParameters ObjectiveParameter[]
  questions           Question[]
  executions          Execution[]

  partnerId String?  @db.ObjectId
  partner   Partner? @relation(fields: [partnerId], references: [id])

  products Product[]

  @@map("objectives")
}

// 4. Question - Template questions for objectives
model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  template     String // "What are the top 5 [product_type] for [persona] in [location]?"
  placeholders String[] // ["product_type", "persona", "location"]

  objectiveId String    @db.ObjectId
  objective   Objective @relation(fields: [objectiveId], references: [id])

  answers Answer[]

  @@map("questions")
}

model ObjectiveParameter {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  key   String // e.g., "rank"
  value String // e.g., "1-5"

  objectiveId String    @db.ObjectId
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@map("objective_parameters")
}

model Persona {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String // "The Creative Freelancer"
  description String?

  occupation      String[] // ["Designer", "Photographer", "Writer"]
  technicalSkills String // "Low-to-medium"
  goals           String[] // ["Showcase portfolio", "attract clients"]
  motivations     String[] // ["Build professional presence", "Increase income"]

  createdAt DateTime @default(now())
  targets   Target[]

  @@map("personas")
}

model Target {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  location String @default("United States")
  language String @default("English")

  personaId   String @db.ObjectId
  executionId String @db.ObjectId

  persona     Persona    @relation(fields: [personaId], references: [id])
  execution   Execution  @relation(fields: [executionId], references: [id])
  objective   Objective? @relation(fields: [objectiveId], references: [id])
  objectiveId String?    @db.ObjectId

  @@map("targets")
}

// 6. Execution - Links everything together for a specific run
model Execution {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // What we're analyzing
  partnerId String  @db.ObjectId
  partner   Partner @relation(fields: [partnerId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  objectiveId String    @db.ObjectId
  objective   Objective @relation(fields: [objectiveId], references: [id])

  // Status tracking
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime        @default(now())
  completedAt DateTime?

  // Relations
  targets  Target[]
  answers  Answer[]
  insights Insight[]

  @@map("executions")
}

// 7. Answer - LLM responses for resolved questions
model Answer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  originalQuestion String // Resolved question sent to LLM
  answerText       String // Full LLM response
  model            LLMModel

  // Metadata
  tokensUsed     Int?
  processingTime Int? // milliseconds

  createdAt DateTime @default(now())

  // Relations
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])

  executionId String    @db.ObjectId
  execution   Execution @relation(fields: [executionId], references: [id])

  insights Insight[]

  @@map("answers")
}

// 8. Insight - Parsed numeric results from answers
model Insight {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Core metrics
  mentioned  Boolean @default(false) // Was our product/partner mentioned?
  ranking    Int? // Position in rankings (1, 2, 3...)
  totalItems Int? // Total items in the list (for context)

  // Extracted data
  mentionContext String? // How it was mentioned
  strengths      String[] // Positive points mentioned
  weaknesses     String[] // Areas for improvement

  // Confidence scoring
  confidence Float? // 0-1 confidence in extraction

  createdAt DateTime @default(now())

  // Relations
  answerId String @db.ObjectId
  answer   Answer @relation(fields: [answerId], references: [id])

  executionId String    @db.ObjectId
  execution   Execution @relation(fields: [executionId], references: [id])

  @@map("insights")
}

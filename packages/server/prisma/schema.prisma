generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PartnerType {
  RESTAURANT
  TECH
  RETAIL
  SERVICE
  HEALTHCARE
  EDUCATION
  OTHER
}

enum MarketingSegment {
  LOCAL
  NATIONAL
  INTERNATIONAL
  B2B
  B2C
}

enum ProductType {
  PHYSICAL_PRODUCT
  SERVICE_LOCATION
  DIGITAL_SERVICE
  EXPERIENCE
}

enum LLMModel {
  GPT_4O
  GPT_4O_MINI
  CLAUDE_3_5_SONNET
  GEMINI_PRO
}

enum EvaluationStatus {
  PENDING // Evaluation request submitted but not processed
  IN_PROGRESS // Currently being processed by LLM
  COMPLETED // Successfully completed
  FAILED // Failed to complete (error occurred)
  CANCELLED // Manually cancelled
  TIMEOUT // Request timed out
}

model Partner {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  publicId String @unique @default(cuid())

  // Basic Information
  name        String      @unique
  description String?
  partnerType PartnerType

  // Contact & Location
  website      String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String
  postalCode   String?

  // Market Information
  industry String?

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products    Product[]
  objectives  Objective[]
  evaluations Evaluation[]

  @@map("partners")
}

model Product {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  publicId String @unique @default(cuid())

  name        String
  description String?
  productType ProductType

  // Pricing (flexible for different types)
  price      Float? // Base price, starting price, or null for location-based pricing
  priceRange String? // "€50-150", "Starting from €99", etc.
  currency   String  @default("EUR")

  // Location
  city    String?
  country String?

  // Status
  isActive Boolean @default(true)

  // Relations
  partnerId   String       @db.ObjectId
  partner     Partner      @relation(fields: [partnerId], references: [id])
  objectives  Objective[]
  evaluations Evaluation[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Objective {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  publicId String @unique @default(cuid())

  // Basic Information
  title     String
  question  String // Final question ready to be sent to LLM
  llmModels LLMModel[] // Array of LLM models to use for evaluation

  // Required Relations
  partnerId String  @db.ObjectId // Required: specific to a partner
  partner   Partner @relation(fields: [partnerId], references: [id])

  productId String  @db.ObjectId // Required: specific to a product
  product   Product @relation(fields: [productId], references: [id])

  // Configuration
  isActive Boolean @default(true)

  // Relations
  evaluations Evaluation[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("objectives")
}

model Evaluation {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  publicId String @unique @default(cuid())

  // LLM Details
  llmModel LLMModel // Which LLM model was used
  prompt   String // The actual prompt sent to LLM
  response String // LLM response

  // Basic Results
  score        Float? // Overall score (0-10)
  mentionFound Boolean @default(false) // Was partner/product mentioned?

  // Structured Analysis Results
  ranking                  Int? // Position in ranking (e.g., 3 for 3rd place)
  totalCompetitors         Int? // Total number of competitors mentioned
  recommendationLikelihood Int? // Percentage likelihood (0-100) of recommendation
  competitiveStrengths     String[] // Array of key strengths
  competitiveWeaknesses    String[] // Array of weaknesses/areas for improvement
  marketPosition           String? // Description of market position
  keyDifferentiators       String[] // What sets them apart from competitors
  evaluation               String? // The detailed evaluation text

  // Status
  status EvaluationStatus @default(PENDING)

  // Relations
  objectiveId String    @db.ObjectId // Required: which objective was evaluated
  objective   Objective @relation(fields: [objectiveId], references: [id])

  partnerId String?  @db.ObjectId // Optional: if evaluation is partner-specific
  partner   Partner? @relation(fields: [partnerId], references: [id])

  productId String?  @db.ObjectId // Optional: if evaluation is product-specific
  product   Product? @relation(fields: [productId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("evaluations")
}
